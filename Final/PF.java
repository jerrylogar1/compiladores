/* Generated By:JavaCC: Do not edit this line. PF.java */
        import java.io.PrintWriter;
        import java.io.FileOutputStream;
        import java.io.File;

public class PF implements PFConstants {
  public static void main(String args[]) throws ParseException
  {
    try
    {
      PF parser = new PF(new java.io.FileInputStream(args[0]));
      parser.Input();
    }
    catch(java.io.FileNotFoundException e)
    {
      System.out.println("El archivo no esta...");
    }
  }

  static final public void Input() throws ParseException {
 System.out.println("Todo bien");
    jj_consume_token(CREATE);
    jj_consume_token(PAGE);
    jj_consume_token(WITH);
    jj_consume_token(TITLE);
    jj_consume_token(BA);
    Contenido();
    jj_consume_token(BC);
    jj_consume_token(0);
  }

  static final public void Contenido() throws ParseException {
System.out.println("Todo bien en Contenido");
    Content();
    Tiempo();
    Contenido();
  }

  static final public void Tiempo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      jj_consume_token(TIMES);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void Content() throws ParseException {
System.out.println("Todo bien en Contenido");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUDIO:
    case VIDEO:
    case IMAGE:
      MediaStructures();
      jj_consume_token(WITH);
      jj_consume_token(CLASS);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(AND);
      jj_consume_token(IDG);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(PCOMA);
      break;
    case PARAGRAPH:
    case TITLE:
    case SUBTITLE:
      TextElement();
      jj_consume_token(DP);
      ManyIDs();
      jj_consume_token(PCOMA);
      break;
    case TABLE:
    case SIDEBAR:
    case NAV:
    case LIST:
      StructureElementsWithElements();
      jj_consume_token(PCOMA);
      break;
    case DIV:
    case SECTION:
      FullStructures();
      jj_consume_token(WITH);
      jj_consume_token(CLASS);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(AND);
      jj_consume_token(IDG);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(PCOMA);
      break;
    case HEADER:
    case FOOTER:
      TopAndBottomStructures();
      jj_consume_token(BA);
      StAttributes();
      jj_consume_token(BC);
      jj_consume_token(PCOMA);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TextElement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAGRAPH:
      jj_consume_token(PARAGRAPH);
      break;
    case TITLE:
      jj_consume_token(TITLE);
      break;
    case SUBTITLE:
      jj_consume_token(SUBTITLE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void StAttributes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIV:
    case SECTION:
      FullStructures();
      jj_consume_token(WITH);
      jj_consume_token(CLASS);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(AND);
      jj_consume_token(IDG);
      jj_consume_token(EQUAL);
      jj_consume_token(ID);
      jj_consume_token(PCOMA);
      break;
    case AUDIO:
    case VIDEO:
    case IMAGE:
      MediaStructures();
      StAttributes();
      break;
    case TABLE:
    case SIDEBAR:
    case NAV:
    case LIST:
      StructureElementsWithElements();
      StAttributes();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  static final public void StructureElementsWithElements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE:
      jj_consume_token(TABLE);
      jj_consume_token(WITH);
      jj_consume_token(BA);
      jj_consume_token(PA);
      ManyAttributesForTable();
      jj_consume_token(PC);
      jj_consume_token(CA);
      jj_consume_token(PA);
      ManyAttributesForTable();
      ManyIDs();
      jj_consume_token(CC);
      jj_consume_token(BC);
      break;
    case LIST:
      jj_consume_token(LIST);
      jj_consume_token(WITH);
      jj_consume_token(ENTERO);
      jj_consume_token(ITEMS);
      break;
    case SIDEBAR:
      jj_consume_token(SIDEBAR);
      jj_consume_token(WITH);
      jj_consume_token(BA);
      AttributesForBar();
      jj_consume_token(CA);
      ManyIDs();
      jj_consume_token(CC);
      jj_consume_token(BC);
      break;
    case NAV:
      jj_consume_token(NAV);
      jj_consume_token(WITH);
      jj_consume_token(BA);
      AttributesForBar();
      jj_consume_token(BC);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ManyAttributesForTable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      label_1:
      while (true) {
        AttributesForTable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTERO:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void AttributesForTable() throws ParseException {
    jj_consume_token(ENTERO);
    jj_consume_token(COLUMNS);
    jj_consume_token(AND);
    jj_consume_token(ENTERO);
    jj_consume_token(ROWS);
  }

  static final public void AttributesForBar() throws ParseException {
    jj_consume_token(ENTERO);
    jj_consume_token(ITEMS);
    jj_consume_token(WITH);
    jj_consume_token(STYLE);
    BarStyle();
  }

  static final public void BarStyle() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SMALLBLOCK:
      jj_consume_token(SMALLBLOCK);
      break;
    case MEDIUMBLOCK:
      jj_consume_token(MEDIUMBLOCK);
      break;
    case LARGEBLOCK:
      jj_consume_token(LARGEBLOCK);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ManyAttributesTableOpt() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      AttributesTableOpt();
    }
  }

  static final public void AttributesTableOpt() throws ParseException {
    jj_consume_token(WITH);
    jj_consume_token(HEADERS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case YES:
      jj_consume_token(YES);
      break;
    case NO:
      jj_consume_token(NO);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TopAndBottomStructures() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADER:
      jj_consume_token(HEADER);
      break;
    case FOOTER:
      jj_consume_token(FOOTER);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FullStructures() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIV:
      jj_consume_token(DIV);
      break;
    case SECTION:
      jj_consume_token(SECTION);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MediaStructures() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMAGE:
      jj_consume_token(IMAGE);
      jj_consume_token(BA);
      ImgAttributes();
      jj_consume_token(BC);
      break;
    case AUDIO:
      jj_consume_token(AUDIO);
      jj_consume_token(BA);
      AudioAttributes();
      break;
    case VIDEO:
      jj_consume_token(VIDEO);
      jj_consume_token(BA);
      MediaAttributes();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MediaAttributes() throws ParseException {
    jj_consume_token(SOURCE);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOV:
      jj_consume_token(MOV);
      break;
    case MP4:
      jj_consume_token(MP4);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMA);
    jj_consume_token(WIDTH);
    jj_consume_token(EQUAL);
    jj_consume_token(ENTERO);
    jj_consume_token(PX);
    jj_consume_token(COMA);
    jj_consume_token(HEIGHT);
    jj_consume_token(EQUAL);
    jj_consume_token(ENTERO);
    jj_consume_token(PX);
  }

  static final public void AudioAttributes() throws ParseException {
    jj_consume_token(SOURCE);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MP3:
      jj_consume_token(MP3);
      break;
    case WAV:
      jj_consume_token(WAV);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ImgAttributes() throws ParseException {
    jj_consume_token(SOURCE);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JPG:
      jj_consume_token(JPG);
      break;
    case PNG:
      jj_consume_token(PNG);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ManyIDs() throws ParseException {
    label_3:
    while (true) {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PFTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xef900000,0x0,0xee100000,0x86100000,0x0,0x0,0x0,0x80000,0x0,0x1800000,0x8000000,0x60000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10000000,0x600e,0xe,0x6000,0x0,0x10000000,0x10000000,0x700,0x0,0x1800,0x0,0x2000,0x4000,0x300000,0xc00000,0x3000000,0x8000000,};
   }

  /** Constructor with InputStream. */
  public PF(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PF(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PFTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PF(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PFTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PF(PFTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PFTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
