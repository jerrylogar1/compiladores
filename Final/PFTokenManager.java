/* Generated By:JavaCC: Do not edit this line. PFTokenManager.java */
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.File;

/** Token Manager. */
public class PFTokenManager implements PFConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000L) != 0L)
            return 6;
         if ((active0 & 0x7fffffffffe0000L) != 0L)
         {
            jjmatchedKind = 59;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x402100000000000L) != 0L)
            return 1;
         if ((active0 & 0x3fdeffffffe0000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x3f008100c000000L) != 0L)
            return 1;
         if ((active0 & 0xde7eff3fe0000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x41800c0000L) != 0L)
            return 1;
         if ((active0 & 0xde7ae73f20000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x5408470300000L) != 0L)
            return 1;
         if ((active0 & 0x8a72a03c20000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x8800001c20000L) != 0L)
            return 1;
         if ((active0 & 0x272a02000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 5;
            }
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x202002400000L) != 0L)
            return 1;
         if ((active0 & 0x70a00000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x70200000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x70000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x50000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 44:
         return jjStopAtPos(0, 12);
      case 46:
         return jjStartNfaWithStates_0(0, 13, 6);
      case 58:
         return jjStopAtPos(0, 14);
      case 59:
         return jjStopAtPos(0, 15);
      case 61:
         return jjStopAtPos(0, 11);
      case 91:
         return jjStopAtPos(0, 9);
      case 93:
         return jjStopAtPos(0, 10);
      case 95:
         return jjStopAtPos(0, 16);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1020000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000220000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000c00000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400400010000000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40180000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x70020000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100004000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x202000200040000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa18802000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000400100000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x81000000080000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 123:
         return jjStopAtPos(0, 5);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80040204140000L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x82a0000c00000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x50005ca080000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001000000000L);
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x10806001000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x160000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000000L);
      case 120:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 51:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 1);
         break;
      case 52:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x410000e00000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1020062000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000L);
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 118:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 1);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 1);
         break;
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200020000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000042000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8440000000000L);
      case 104:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000000L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x18400100000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1200801000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 1);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40001c00000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200800000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 1);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x200400000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x50800000000L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 1);
         break;
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 1);
         break;
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x50000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x50000000000L);
      case 104:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 1);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 107:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 46)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(6);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(3);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  kind = 61;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(7, 6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\175", "\50", "\51", "\133", "\135", 
"\75", "\54", "\56", "\72", "\73", "\137", "\143\162\145\141\164\145", 
"\160\141\147\145", "\167\151\164\150", "\164\141\142\154\145", "\143\154\141\163\163", 
"\150\145\141\144\145\162\163", "\150\145\141\144\145\162", "\146\157\157\164\145\162", 
"\163\151\144\145\142\141\162", "\156\141\166", "\144\151\166", "\151\164\145\155\163", 
"\141\165\144\151\157", "\166\151\144\145\157", "\154\151\163\164", "\154\151\156\153", 
"\160\141\162\141\147\162\141\160\150", "\164\151\164\154\145", "\163\165\142\164\151\164\154\145", "\141\156\144", 
"\143\157\154\165\155\156\163", "\162\157\167\163", "\163\164\171\154\145", 
"\163\155\141\154\154\102\154\157\143\153", "\155\145\144\151\165\155\102\154\157\143\153", 
"\154\141\162\147\145\102\154\157\143\153", "\171\145\163", "\156\157", "\163\145\143\164\151\157\156", 
"\151\155\141\147\145", "\163\157\165\162\143\145", "\167\151\144\164\150", "\160\170", 
"\164\151\155\145\163", "\150\145\151\147\150\164", "\155\157\166", "\155\160\64", "\155\160\63", 
"\167\141\166", "\152\160\147", "\160\156\147", "\151\144", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[8];
static private final int[] jjstateSet = new int[16];
static protected char curChar;
/** Constructor. */
public PFTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PFTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 8; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
