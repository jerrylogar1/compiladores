	PARSER_BEGIN(PF)
	import java.io.PrintWriter;
	import java.io.FileOutputStream;
	import java.io.File;

public class PF 
{
  public static void main(String args[]) throws ParseException 
  {
  	String fullReturn = "";
    try 
    {
     
      PF parser = new PF(new java.io.FileInputStream(args[0]));
      fullReturn = parser.Input(fullReturn);
    }
    catch(java.io.FileNotFoundException e){	System.out.println("El archivo no esta..."); }
    try {
    	PrintWriter writer = new PrintWriter("result.html", "UTF-8");
		writer.println(fullReturn);
        writer.close();
    } catch (Exception e) { System.out.println("Output file cannot be created"); }
  }
  
}
PARSER_END(PF)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
	  < BA : "{" >
	| < BC : "}" >
	| < PA : "(" >
	| < PC : ")" >
	| < CA : "[" >
	| < CC : "]" >
	| < EQUAL : "=" >
	| < COMA : "," >
	| < PUNTO : "." >
	| < DP : ":" >
	| < PCOMA : ";" >
	| < GB : "_" >
	| < CREATE : "create" >
	| < PAGE : "page" >
	| < WITH : "with" >
	| < TABLE : "table" >
	| < CLASS : "class" >
	| < SIDEBAR : "sidebar" >
	| < NAV : "nav" >
	| < DIV : "div" >
	| < ITEMS : "items" >
	| < AUDIO : "audio" >
	| < VIDEO : "video" >
	| < LIST : "list" >
	| < LINK : "link" >
	| < PARAGRAPH : "paragraph" >
	| < TITLE : "title" >
	| < SUBTITLE : "subtitle" >
	| < AND : "and" >
	| < COLUMNS : "columns" >
	| < ROWS : "rows" >
	| < STYLE : "style" >
	| < SMALLBLOCK : "smallBlock" >
	| < MEDIUMBLOCK : "mediumBlock" >
	| < LARGEBLOCK : "largeBlock" >
	| < YES : "yes" >
	| < NO : "no" >
	| < SECTION : "section" >
	| < IMAGE : "image" >
	| < SOURCE : "source" >
	| < WIDTH : "width" >
	| < PX : "px" >
	| < TIMES : "times" >
	| < HEIGHT : "height" >
	| < MOV : "mov" >
	| < MP4 : "mp4" >
	| < MP3 : "mp3" >
	| < WAV : "wav" >
	| < JPG : "jpg" >
	| < PNG : "png" >
	| < IDG : "id" >
	| < ID : ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
	| < ENTERO : ["1"-"9"] (["0"-"9"])*>
	| < REAL : (["0"-"9"])* "." (["0"-"9"])*(["0"-"9"])*  >

}
String Input(String x):
{
	
	String node_string;
	Token title_a;
	System.out.println("Todo bien");}
{
	<CREATE><PAGE><WITH> <TITLE> title_a = <ID> <BA> node_string = Contenido() <BC><EOF>
	{
	x = "<!DOCTYPE html>\n";
	x += "<html>\n";
	x += "<head>\n";
	x += "<meta charset='UTF-8'>\n";
	x += "<title>";
	x += title_a.image;
	x += "</title>\n";
	x += "</head>\n";
	x += "<body>\n";
	x += node_string;
	//System.out.println(node_string);
	x += "\n</body>\n";
	x += "</html>\n";
	return x;
	}
}


String Contenido():
{
	String current_string="";
	String temp = "";
	Token times;
}
{
	(temp = Content(){current_string += temp; }  (times=<ENTERO><TIMES>{current_string += times.image;})* )+ 
	{ 
	System.out.println(current_string);
		return current_string;	}
}


String Content():
{
	String curr;
	String acum;
	Token name;
	Token class_;
	Token text_type;
	Token description;
	String acum_desc = "";
	String sewe = "";
}
{
	( acum = MediaStructures() <WITH> <CLASS> <EQUAL>  class_ = <ID> <AND> <IDG> <EQUAL> name = <ID> <PCOMA> 
	{ //This string concat is for Media 
		curr = acum;
		curr += " class = '" + class_.image + "' id = '" + name.image + "'"; 
		System.out.println(curr);
		return curr;
	}
	|  (text_type = <PARAGRAPH> | text_type =<TITLE> | text_type =<SUBTITLE>) <DP> (description = <ID>{acum_desc += " " + description.image;})+  <PCOMA> 
	{
		if(text_type.image == "paragraph") {

			curr = "<p>" + acum_desc + "</p>\n";
		}
		else if (text_type.image == "title"){
			curr = "<h1>" + acum_desc + "</h1>\n";
		}
		else if (text_type.image == "subtitle"){
			curr = "<h2>" + acum_desc + "</h2>\n";
		}
		else{ curr = "Error!!!!";}
		return curr;
	}
	|  sewe = StructureElementsWithElements() <PCOMA>
	{

		curr = sewe;
		return curr;
	}
	| (text_type = <DIV> | text_type = <SECTION>) <WITH> <CLASS> <EQUAL> class_ = <ID> <AND> <IDG> <EQUAL> name = <ID> <PCOMA>
	{
		if(text_type.image == "div"){
			curr = "<div id = '"+ name.image +"' class= '" + class_.image + "' >";
		}
		else if (text_type.image == "section")
		{
			curr = "<section id = '"+ name.image +"' class= '" + class_.image + "' >";
		}
		else{
			curr = "Error!!!!";
		}
		
		return curr;
	}
	)
	
}


void StAttributes():
{ String x;
}
{
	MediaStructures() StAttributes(){}
	| x = StructureElementsWithElements() StAttributes(){}
	| {}
}


String StructureElementsWithElements():
{
	String curr = "";
	String final_a;
	String a = "si";
	Token number;
}
{
	(<TABLE> <WITH> <BA> <PA> <ENTERO> <COLUMNS> <AND> number = <ENTERO> <ROWS> <PC> <CA> curr = TableContent(){System.out.println(curr);} <CC> <BC>
	{
		
		for (int i = 0;i<Integer.parseInt(number.image);i++){
			final_a = curr;
		}
		return a;
	} 
	| <LIST> <WITH> <ENTERO> <ITEMS> {return a;}
	| <SIDEBAR> <WITH> <BA> AttributesForBar() <CA> (<ID>)+ <CC> <BC>{return a;}
	| <NAV> <WITH> <BA> AttributesForBar() <BC>) {return a;}

	
}


String TableContent():
{
	String acum = "<table style='width:100%'>";
	Token content;
}
{
	(<PA> ((content = <ID>{acum += "<td>" + content.image + "</td>\n";})+ {return acum;}
	| (content = <ENTERO>{acum += "<td>" + content.image + "</td>\n";}) ) <PC>)* {return acum;}

}

void AttributesForBar():
{}
{
	<ENTERO> <ITEMS> <WITH> <STYLE> (<SMALLBLOCK> | <MEDIUMBLOCK> | <LARGEBLOCK>)
}



String MediaStructures():
{
	String att_st_audio = "";
	String att_st_img = "";
	String att_st_video = "";
	String media_st = "";
	Token name;
	Token class_;
}
{
	(<IMAGE> <BA> att_st_img = ImgAttributes() <BC>  {media_st += "<img src="; media_st += att_st_img+"'>"; return media_st;} 
	| <AUDIO> <BA> att_st_audio = AudioAttributes() <BC> {media_st += "\n\n<audio controls>\n"; media_st += att_st_audio; media_st += "Your browser does not support the audio element.</audio>"; return media_st;} 
	| <VIDEO> <BA> att_st_video = MediaAttributes() <BC> ) <WITH> <CLASS> <EQUAL>  class_ = <ID> <AND> <IDG> <EQUAL> name = <ID> <PCOMA> {media_st += "\n\n<video"; media_st += att_st_video; media_st += "</video>"; 
	return media_st;} 
}


String MediaAttributes():
{String source_st = ""; Token file; Token format; Token width_video; Token height_video;}
{
	<SOURCE> (file = <ID> <PUNTO> (format = <MOV> |  format = <MP4>) ) <COMA> <WIDTH> <EQUAL> width_video = <ENTERO> <PX> <COMA> <HEIGHT> <EQUAL> height_video = <ENTERO> <PX>
	{source_st = " width='" + width_video.image + "'"+" height='" + height_video.image + "' controls>\n \t<source src='" + file.image + "." + format.image + "' type='video/mp4'>\n" ;
	return source_st;}
}


String AudioAttributes():
{String source_st = ""; Token file; Token format;}
{
	<SOURCE>  (file = <ID> <PUNTO> (format = <MP3> | format = <WAV>) ) {source_st = "\t<source src = '" + file.image + "." + format.image + "' type='audio/mpeg'>";
	return source_st;}
}


String ImgAttributes():
{	String source_st = ""; 
	Token width_img;
	Token height_img; 
	Token format; 
	Token file;
}
{
	<SOURCE>  (file = <ID> <PUNTO> (format = <JPG> | format = <PNG>) ) <COMA> <WIDTH> <EQUAL> width_img = <ENTERO> <PX> <COMA> <HEIGHT> <EQUAL> height_img = <ENTERO> <PX> 
	{
		source_st ="'" +file.image + "." + format.image + "' width = '" + width_img.image + "px' height = " + height_img.image + "px'";
	 	return source_st;
	}
}
